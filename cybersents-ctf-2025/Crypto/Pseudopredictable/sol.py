from Crypto.Util.number import isPrime, long_to_bytes

s = [172574366186522099453152553510286100456045303938970984749671481539126061395150, 213452098588954785236423789646842880126942747585128221630610137685878670428856, 120140893586047400115063147533673608428777944254084798923564474540478062421288]
#n = 1214027323754033240855452554125196191117635639304696902992395122476185983100338201688921965945188846463786455552414550507646600974256238535337948721111894045133043505849468653375031646914070816224556951555673356432909535247726471365071500270381193729284856650639476758260665036180033461555178309917807146765867422675113698936867298064363457602738689655964896006103463036309305510295797145818811089929710813769942065648674273899667187535352723174922376727151854703503600626669132519278336701029776009049116591268592929416624584662539241645938964250836673759860026073956237476652965881654694890024037647731739881566517
e = 65537
ct = 1146925802412396306429045208840438006492893092461567543783032072915874322352460640553754422361333106164716321005704861605877243543074149419838652803860892532937368410132774318637583096580727828898247962532586083840994053427771160669020020870242071247416029689706422786315482901021175850811637012850273886262020691609229864530016127170474522053923142946260440376107972016862727050456787403389015713389832609749494875641106790442262462731667589452689140375899693332603236677929505795530640014126187371192198789626167210132118537165017243889193731206451274568819672062099251154362092267248143497999117286353198217989194

n = (2**257)-1

inv = pow(( s[1] - s[0] ), -1, n)
m = ( (s[2] - s[1] ) * inv ) % n

c = s[2] - ( s[1] * m ) % n

seed = ( ( ( s[0] - c ) % n ) * pow(m,-1,n) ) % n

class LCG:
    n = (2**257)-1

    def __init__(self, seed, mul, inc):
        self.state = seed
        self.m = mul
        self.c = inc

    def next(self):
        self.state = (self.state * self.m + self.c) % self.n
        return self.state


gen = LCG(seed, m, c)
prime_array = []
prime_modulus = 1

i = 1
while True:
	possible_prime = gen.next()
	if isPrime(possible_prime) and possible_prime.bit_length() == 256:
		prime_array.append(possible_prime)
		prime_modulus = prime_modulus * possible_prime
		#debug
		print(i, possible_prime)
		if len(prime_array) == 8:
			break
	i = i+1

print(prime_array)
print(prime_modulus)

n = prime_modulus
phi = 1
for p in prime_array:
	phi = phi * (p-1)

e = 0x10001

d = pow(e, -1, phi)

m = pow(ct, d, n)
print(long_to_bytes(m))